// For the pages that are lists of books (i.e., Authors, Series, Volumes).

// START OF THE RESPONSIVE VARIABLES
// When the <main> element reaches its full width, this <nav> only requires one line. As the
// viewport becomes smaller, the <nav> uses more than one line. These variables say at which
// viewport widths this happens.
$is-2-lines: 750px;  // 751 is one line; 750 is two lines
$is-3-lines: 599px;
$is-4-lines: 451px;
$is-5-lines: 356px;

$nav-position-from-top: $std-space;
$category-letter-margin-top: $std-space * 2;
$sticky-list-nav-border-width: $std-space / 16;  // 1px, the stupid way
$sticky-list-nav-vertical-padding: 1rem;
$sticky-list-nav-letter-height: (19 / 16) * $std-space;  // NB: 19px; not used to set letter height; I measured it

// These are the measured heights of the <nav> element depending on how many lines are in it.
// TODO: gotta be a better way
// TODO: revise the descriptive comment
$one-line-height: (2 * $sticky-list-nav-border-width) + (2 * $sticky-list-nav-vertical-padding) + (1 * $sticky-list-nav-letter-height);
$two-line-height: (4 * $sticky-list-nav-border-width) + (4 * $sticky-list-nav-vertical-padding) + (2 * $sticky-list-nav-letter-height);
$three-line-height: (6 * $sticky-list-nav-border-width) + (6 * $sticky-list-nav-vertical-padding) + (3 * $sticky-list-nav-letter-height);
$four-line-height: (8 * $sticky-list-nav-border-width) + (8 * $sticky-list-nav-vertical-padding) + (4 * $sticky-list-nav-letter-height);
// END OF THE RESPONSIVE VARIABLES

.list-of-books {
    padding-left: 2rem;
}

.content-list {
    font-size: 1.1em;
    line-height: 1.6em;
    margin-left: 5vw;
    margin-bottom: 3 * $std-space;

    > li > a {
        border-color: transparent;
        border-style: solid;
        border-width: 1px;
        padding: .25em .5em;

        &:hover, &:focus {
            text-decoration: none;
        }
    }

    .category-letter {
        font-size: 1.25em;
        font-weight: bold;
        margin-top: $category-letter-margin-top;
        margin-bottom: $std-space;
    }

    @each $category in $data-categories {
        &.#{$category}-list > li > a:hover,
        &.#{$category}-list > li > a:focus {
            background-color: var(--#{$category}-background-color);
            border-color: var(--#{$category}-border-color);
        }
    }
}

.content-list.authors-list, .content-list.series-list {
    *:target {
        margin-left: -5vw;

        > a {
            display: none;
        }
        .expansion-part {
            display: block;
        }
    }
}

.series-list .year-divider {
    // NB: There's no other use of .year-divider, but I'm nesting the selector anyway, for fun.

    align-items: center;
    color: var(--oc-gray-6);
    display: flex;
    font-size: 1.1em;
    margin: 1rem 0 0.25rem;

    $divider-line-margin: 0.75rem;

    &:before, &:after {
        content: "";
        border: 1px solid var(--oc-gray-3);
        height: 0;
    }

    &:before {
        margin-right: $divider-line-margin;
        width: 2rem;
    }
    &:after {
        flex-grow: 1;
        margin-left: $divider-line-margin;
    }
}

.series-subtitle {
    color: var(--oc-gray-6);
    font-size: 0.8em;
    font-weight: normal;
    margin-top: 0.25rem;
}

.content-list, .content-list ol {
    list-style: none;
    padding: 0;
}

.expansion-part {
    display: none;

    border-color: black;
    border-style: solid;
    border-width: 2px;
    font-size: 1rem;
    max-width: 1000px;
    margin: $std-space 0;
    padding: $std-space;

    h2 {
        font-size: 2em;
        margin-top: 0;
    }

    h3 {
        font-size: 2em;
        margin-top: 0;
    }
}

@each $category in $data-categories {
    .#{$category}-list .expansion-part {
        border-color: var(--#{$category}-border-color);
    }

    .#{$category}-list .list-of-books a:hover,
    .#{$category}-list .list-of-books a:focus {
        color: var(--#{$category}-color-focus);
    }
}

.titles-list .list-of-books {
    // Browser support for string values of list-style-type is very limited. It looks better when
    // it's available, so we'll use it when we can, but we also need to start with this fallback
    // for browsers without support.
    //     Also note: the horizontal positioning is different between browsers that do and do not
    // support the thing. I don't really mind.
    li:before {
        content: '\2192';
        left: -1em;
        position: relative;
    }

    @supports (list-style-type: 'strings') {
        list-style-type: '\2192';  // "right arrow" for Firefox

        li:before {
            content: unset;
            left: unset;
            position: unset;
        }
    }

    li {
        padding-left: $std-space;
    }
}

.target-element {
    position: relative;

    // no matter how many rows of the sticky letter header, we always need to account for these
    $base-vertical-offset: $nav-position-from-top + $category-letter-margin-top;
    top: -1 * ($one-line-height + $base-vertical-offset);

    // Adjust the position of the letter target according to how many rows in the <nav> element.
    @media (max-width: #{$is-2-lines}) {
        top: -1 * ($two-line-height + $base-vertical-offset);
    }
    @media (max-width: #{$is-3-lines}) {
        top: -1 * ($three-line-height + $base-vertical-offset);
    }
    @media (max-width: #{$is-4-lines}) {
        top: -1 * ($four-line-height + $base-vertical-offset);
    }
}

.sticky-list-nav {
    // basic appearance
    background: var(--background-color);
    border: solid $sticky-list-nav-border-width var(--default-color);
    display: inline-block;
    width: 100%;

    // make it "float" when you scroll down
    position: -webkit-sticky;
    position: sticky;
    top: $nav-position-from-top;
    z-index: $sticky-list-nav-zindex;

    // Smaller than this, it's difficult to show 26 letters at the same time as the page content.
    // We want to use height-based judgement too, since someone on a desktop or laptop screen might
    // have a narrow but tall aspect ratio.
    $required-min-factor: 3;
    @media (max-height: #{$one-line-height * $required-min-factor}) {
        position: initial;
        top: unset;
        z-index: unset;
    }
    @media (max-width: #{$is-2-lines}) and (max-height: #{$two-line-height * $required-min-factor}) {
        position: initial;
        top: unset;
        z-index: unset;
    }
    @media (max-width: #{$is-3-lines}) and (max-height: #{$three-line-height * $required-min-factor}) {
        position: initial;
        top: unset;
        z-index: unset;
    }
    @media (max-width: #{$is-4-lines}) and (max-height: #{$four-line-height * $required-min-factor}) {
        position: initial;
        top: unset;
        z-index: unset;
    }

    ul {
        list-style: none;
        margin: 0 0.5rem;
        padding: 0;

        display: flex;
        flex-wrap: wrap;
        justify-content: space-between;
    }

    a {
        color: var(--link-color);
        display: inline-block;
        padding: $sticky-list-nav-vertical-padding 0.5rem;

        &:hover, &:focus {
            background-color: var(--link-color);
            color: var(--background-color);
        }

        @media (max-width: 750px) {
            padding: $sticky-list-nav-vertical-padding 1rem;
        }
    }
}
